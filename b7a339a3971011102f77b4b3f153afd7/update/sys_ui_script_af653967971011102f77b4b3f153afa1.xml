<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_376096_pxp.list_infuse</name>
        <script><![CDATA[var x_376096_pxp = x_376096_pxp || {};

x_376096_pxp.list_infuse = (function() {
	"use strict";
	/* global setTimeout */
	/* eslint no-undef: "error" */
	if (x_376096_pxp.list_infuse) {
		return x_376096_pxp.list_infuse;
	}
	
	var ootbFormWidget = 'fd1f4ec347730200ba13a5554ee490c0';
	var ootbDataTableWidget = '5001b062d7101200b0b044580e6103eb';
	
	setTimeout(function () {
		var $window = this;
		var scopedObjectGenerator = new $window.Promise(function(resolve, reject) {
			var xhr = new $window.XMLHttpRequest();
			xhr.open('GET', '/scripts/scoped_object_generators.js', true);
			xhr.onload = function () {
				if (xhr.readyState === xhr.DONE && xhr.status === 200) {
					resolve(xhr.responseText);
				} else {
					reject(xhr.responseText);
				}
			};
			xhr.send(null);
		});

		var observer = new $window.MutationObserver(function (mutations) {
			for (var i = 0; i < mutations.length; i++) {
				var mutation = mutations[i];
				if (mutation.addedNodes) {
					for (var j = 0; j < mutation.addedNodes.length; j++) {
						var node = mutation.addedNodes[j];
						if (node.classList
							&& node.classList.contains('v' + ootbDataTableWidget)
							&& !node.classList.contains('pxp-list-infused')) {
							node.classList.add('pxp-list-infused');
							new ListInject($window, node, scopedObjectGenerator);
						}
					}
				}
			}   
		});

		observer.observe($window.document, {
			childList: true,
			subtree: true
		});
	});
	
	return {
		type: 'list_infuse'
	};
	
	function ListInject($window, node, scopedObjectGenerator) {
		var $element = $window.angular.element(node);
		var $scope = $element.scope();
		var $injector = $element.injector();
		var $compile = $injector.get('$compile');
		var $log = $injector.get('$log');
		var $timeout = $injector.get('$timeout');
		var $location = $injector.get('$location');
		var spUtil = $injector.get('spUtil');
		
		// used by triggerUIAction
		var glideUrlBuilder = $injector.get('glideUrlBuilder');
		var glideUserSession = $injector.get('glideUserSession');
		var $q = $injector.get('$q');
		var $http = $injector.get('$http');
		var $rootScope = $injector.get('$rootScope');

		var scopedGlideAjaxGeneratorPromise = (function () {
			var deferred = $q.defer();
			scopedObjectGenerator.then(function (script) {
				script += 'function ScopedGFormGenerator() {}' // TODO: implement
					+ 'function ScopedGlideDialogWindowGenerator() {}' // TODO: implement
					+ 'function notifyFromWrappedScopedObject(options) {'
					+ '$rootScope.$broadcast("$$uiNotification", { type: options.attributes.type, message: options.text });'
					+ '}'
					+ 'return ScopedGlideAjaxGenerator;';

				deferred.resolve(new Function ('$rootScope', script)($rootScope));
			});

			return deferred.promise;
		})();
		
		var tableStyles = {};
		$scope.x_376096_pxp_ui_actions = {
			head: [],
			row: [],
			foot: []
		};
		var formWidget = $element.closest('.v' + ootbFormWidget);
		var formScope, formModelScope;
		if (formWidget.length) {
			formScope = formWidget.scope();
			// order-guide: angular.element(document).find('div.form-group[field*=formModel]').first().scope().getGlideForm()
			formModelScope = $element
				.find('div[form_model]') // this contains the actual form (sp-model)
				.children()
				.last() // execItemScripts() div which contains the getGlideForm-function
				.scope();
		}
		
		if ($scope.portal.url_suffix == 'x_376096_pxp_embedded') {
			var main = $element.closest('main');
			$window.setInterval(function () {
				var height = main.prop('scrollHeight');
				if ($window.frameElement && height) {
					$window.frameElement.style.height = height + 'px';
				}
			}, 50);
		}
		
		// widget-data-table is loaded asynchronously, this means core dependencies like '$scope.data.fields' isn't initially available!
		/*var loadingDataUnsubscribe = $scope.$watch('loadingData', function (newValue) {
			if (newValue == false) {
				loadingDataUnsubscribe();

				var rowCount = $scope.data.row_count;
				$scope.data.row_count = 0;
				$scope.loadingData = true;
				$q.all([
					loadTableUIActions($scope.data),
					loadTableStyles($scope.data)
				]).then(function (results) {
					var uiActions = results[0];
					
					uiActions.head.forEach(function (uiAction) {
						uiAction.ui_action = uiActions.definition[uiAction.sys_id];
					});
					
					uiActions.row = uiActions.row.map(function (uiActionSysID) {
						return uiActions.definition[uiActionSysID];
					});
					
					uiActions.foot.forEach(function (uiAction) {
						uiAction.ui_action = uiActions.definition[uiAction.sys_id];
					});
					
					$scope.x_376096_pxp_ui_actions = results[0];
					tableStyles = results[1];
					
					return loadItemData($scope.data);
				})['finally'](function () {
					$scope.data.row_count = rowCount;
					$scope.loadingData = false;
				});
			}
		});*/
		
		var unregisterInterceptor = x_376096_pxp.sputil_interceptor.register($scope, function (data) {
			return $q.all([
				loadTableUIActions(data),
				loadTableStyles(data)
			]).then(function (results) {
				var uiActions = results[0];

				uiActions.head.forEach(function (uiAction) {
					uiAction.ui_action = uiActions.definition[uiAction.sys_id];
				});

				uiActions.row = uiActions.row.map(function (uiActionSysID) {
					return uiActions.definition[uiActionSysID];
				});

				uiActions.foot.forEach(function (uiAction) {
					uiAction.ui_action = uiActions.definition[uiAction.sys_id];
				});

				$scope.x_376096_pxp_ui_actions = results[0];
				tableStyles = results[1];

				return loadItemData(data);
			}).then(function () {
				// if no filter is set, the record watcher will not be initialized ...
				if (!data.filter) {
					// ... by using a dummy filter here, the record watcher is properly initialized (in the next cycle) ...
					data.filter = 'sys_id!=x';
					
					$timeout(function () {
						// ... and before the rendering takes place, we clear out the data again so the 'sys_id!=x' doesn't appear in the breadcrumbs
						data.filter = '';
					});
				}
			});
		});
		
		$scope.$on('$destroy', function () {
			unregisterInterceptor();
		});
		
		$scope.x_376096_pxp_enableUIActions = 'enable_ui_actions' in $scope.data ? 
			!!$scope.data.enable_ui_actions :
			'enable_ui_actions' in $scope.options ?
			!!$scope.options.enable_ui_actions :
			true;
		
		$scope.x_376096_pxp_buttonClicked = buttonClicked;
		
		// Disable all table manipulation while submitting
		// Note: This is for <td> and <th> clicks which cannot be disabled with ng-disabled.
		//       Instead, we have to prevent those clicks from executing
		['go', 'setOrderBy'].forEach(function (fnName) {
			var ootbFn = $scope[fnName];
			$scope[fnName] = function () {
				if ($scope.x_376096_pxp_submitting) {
					return;
				}
				
				ootbFn.apply($scope, arguments);
			};
		});
		
		$scope.widget.template = $scope.widget.template
			.replace('<table', '<table ng-if="!loadingData"')
		
			// disable button on submit: context menu, new button, search button
			.replace(/<button/g, '<button ng-disabled="x_376096_pxp_submitting"')
			.replace('<input', '<input ng-disabled="x_376096_pxp_submitting"')
		
			// disable button on submit: (change page buttons on the bottom - setPageNum)
			.replace(/<a/g, '<a ng-disabled="x_376096_pxp_submitting"')
		
			// this item is needed to inject the field style
			.replace('<td', '<td ng-style="item[field].x_376096_pxp_styles"')
		
			// enable two-way binding on widget-data-table
			.replace(/::item\[field\]/g, 'item[field]')
		
			// this replacement is needed to inject the field style class
			.replace('ng-class="{selected: item.selected}"',
				'ng-class="[item[field].x_376096_pxp_class, item.selected && \'selected\']"')
		
			// the following replacement is needed to inject UI-Actions in the header (List banner Button)
			// note that there are more than one <div class="clearfix"> in the html, however we only care about the first one
			.replace('<div class="pull-right"',
				'<div ng-if="x_376096_pxp_enableUIActions" class="list-head-btn-container pull-right">'
					+ '<button ng-repeat="head_action in x_376096_pxp_ui_actions.head | orderBy: \'head_action.ui_action.order\'"'
						+ ' data-pxp-ui-action={{::head_action.sys_id}}'
						+ ' class="btn btn-primary btn-sm m-l-xs list-btn pxp-list-btn"'
						+ ' ng-click="x_376096_pxp_buttonClicked(head_action.ui_action, \'head\')"'
						+ ' ng-disabled="!head_action.enabled || x_376096_pxp_submitting">'
						+ '{{::head_action.ui_action.label}}'
					+ '</button>'
				+ '</div>'
				+ '<div class="pull-right"')
		
			// the following replacements are needed to inject the row (List choice) UI-Actions
			.replace('</th>', 
				'</th><th ng-if="x_376096_pxp_enableUIActions && x_376096_pxp_ui_actions.row.length > 0 && data.fields" style="width:1%">Actions</th>')
			.replace('</td>', '</td>'
				+ '<td ng-if="x_376096_pxp_enableUIActions" ng-class="{selected: item.selected}">'
					+ '<div class="list-row-btn-container">'
						+ '<button ng-repeat="row_action in x_376096_pxp_ui_actions.row | orderBy: \'row_action.order\'"'
							+ ' data-pxp-ui-action={{::row_action.sys_id}}'
							+ ' class="action-btn list-btn pxp-list-btn"'
							+ ' ng-click="x_376096_pxp_buttonClicked(row_action, item)"'
							+ ' ng-disabled="!item.x_376096_pxp_ui_actions[row_action.sys_id].enabled || x_376096_pxp_submitting">'
							+ '{{::row_action.label}}'
						+ '</button>'
					+ '</div>'
				+ '</td>')
		
			// the following replacement is needed to inject UI-Actions in the footer (List bottom Button)
			.replace(/{{data.row_count}}\s+<\/div>/,
				'{{data.row_count}}'
				+ '<div ng-if="x_376096_pxp_enableUIActions" class="list-foot-btn-container pull-right">'
					+ '<button ng-repeat="foot_action in x_376096_pxp_ui_actions.foot | orderBy: \'foot_action.ui_action.order\'"'
						+ ' data-pxp-ui-action={{::foot_action.sys_id}}'
						+ ' class="btn btn-primary btn-sm m-l-xs list-btn pxp-list-btn"'
						+ ' ng-click="x_376096_pxp_buttonClicked(foot_action.ui_action, \'foot\')"'
						+ ' ng-disabled="!foot_action.enabled || x_376096_pxp_submitting">'
						+ '{{::foot_action.ui_action.label}}'
					+ '</button>'
				+ '</div>'
				+ '</div>')
		;
		
		$element.html($scope.widget.template);
		$compile($element.contents())($scope);
		
		return this;
	
// 		item has the following structure (number, priority, short_description depend on what you selected as fields in the instance options):
// 		{
// 			sys_id: '<Sys ID of the item>',
// 			targetTable: '<table name of the item>',
// 			number: {
// 				display_value: "INC00000XYZ",
// 				label: "Number",
// 				limit: "40",
// 				type: "string",
// 				value: "INC00000XYZ"
// 			},
// 			priority: {
// 				display_value: "5 - Planning",
// 				label: "Priority",
// 				limit: "40",
// 				type: "integer",
// 				value: "5"
// 			},
// 			short_description: {
// 				display_value: "My Short Description",
// 				label: "Short description",
// 				type: "string",
// 				value: "My Short Description"
// 			}
// 		}
		function buttonClicked(action, item) {
			// trigger UI Action is aligned to the ootb spUIActionFactory::executeUIAction and formModel::executeUIAction
			// console: angular.element(document).injector().get('spUIActionFactory').executeUIAction
			
			if (item == 'foot' || item == 'head') {
				item = {
					targetTable: $scope.data.table,
					sys_id: ''
				};
			}
			
			$scope.x_376096_pxp_submitting = true;
			try {
				var actionClientScript = (new Function('return (' + action.client_script + ')'))();
				glideUserSession.loadCurrentUser().then(function (user) {
					return scopedGlideAjaxGeneratorPromise.then(
						function (scopedGlideAjaxGenerator) { return action.scope && action.scope != 'global' ? scopedGlideAjaxGenerator(action.scope) : $window.GlideAjax; },
						function () { return $window.GlideAjax; }
					).then(function (GlideAjax) {
						var actionParameters = {};
						var result = $injector.invoke(actionClientScript, $scope, {
							item: item,
							g_user: user,
							g_form: formModelScope ? formModelScope.getGlideForm() : undefined,
							g_scratchpad: formScope ? formScope.data.f.g_scratchpad : undefined,
							g_ui_scripts: $window.uiScriptFactory.create((formScope && formScope.data.f.ui_scripts) || [], $q),
							sys_id: formScope ? formScope.data.f._attachmentGUID : undefined,
							GlideAjax: GlideAjax,
							GlideURL: glideUrlBuilder,
							action: {
								getURLParameter: function (name) {
									return actionParameters[name];
								},
								setURLParameter: function (name, value) {
									actionParameters[name] = value;
								}
							}
						});

						var promise;
						if (result && typeof result.then === 'function') {
							promise = result;
						} else if (result || result === undefined) {
							promise = $q.resolve(result);
						} else {
							promise = $q.reject();
						}

						return promise.then(function (result) {
							if (result || result === undefined) {
								return submitUIAction(item, action, actionParameters);
							}
						});
					});
				})['catch'](function (e) {
					if (e != undefined) {
						$log.error('Unknown Error in Portal Client Script of UI Action ' + action.label + ' (' + action.sys_id + ')', arguments);
						
						if (e instanceof Error) {
							if ($window.g_user_is_admin) {
								spUtil.addErrorMessage(e ? e.message : 'Unknown Error in Portal Client Script of UI Action <a href="/nav_to.do?uri=sys_ui_action.do?sys_id=' + action.sys_id + '" target="_blank">' + action.label + '</a>.');
							}
						}
					}
				})['finally'](function () { 
					$scope.x_376096_pxp_submitting = false;
				});
			} catch (e) {
				$scope.x_376096_pxp_submitting = false;
				
				$log.error(e);
				if ($window.g_user_is_admin) {
					spUtil.addErrorMessage(e.message);
				}
			}
		
			function submitUIAction(item, action, actionParameters) {
				// in the classicUI, collection=<parent_table> and collectionID=<parent_sys_id> will result in the 'parent' variable to be set.
				// I do not know of any way to set the parent (e.g. so that the condition or UI Action script itself runs properly)
				
				// ripped from OOTB code (open browser developer console and search for): executeDesktopUIAction
				var formData = {

				};

				for (var attr in item) {
					if (attr != 'actions' && typeof item[attr] == 'object') {
						formData[attr] = {
							value: item[attr].value
						};
					}
				}

				var urlParameters = Object
					.keys(actionParameters)
					.map(function (name) {
						return encodeURIComponent(name) + '=' + encodeURIComponent(actionParameters[name]);
					}).join('&');
				
				if (urlParameters) {
					urlParameters = '?' + urlParameters;
				}
				
				var req = {
					method: 'POST',
					url: '/api/now/sp/uiaction/' + action.sys_id + urlParameters,
					headers: {
						'Accept': 'application/json',
						'x-portal': $rootScope.portal_id
					},
					data: {
						table: item.targetTable,
						recordID: item.sys_id,
						data: formData
					}
				};

				return $http(req).then(function (response) {
					var r = response.data.result;
					if (r && r.$$uiNotification) {
						$rootScope.$broadcast('$$uiNotification', r.$$uiNotification);
					}
					
					$rootScope.$broadcast('x_376096_pxp_list_ui_action_finished', {
						status: r && !r.isActionAborted ? 'success' : 'error'
					});

					return r;
				}, function () {
					$rootScope.$broadcast('x_376096_pxp_list_ui_action_finished', {
						status: 'error'
					});
				});
			}
		}
		
		function loadItemStyles(data) {
			if (data.list && data.list.length > 0) {
				var deferred = $q.defer();
				var ga = new $window.GlideAjax('PortalListUtilClient').setScope('x_376096_pxp');
				ga.addParam('sysparm_name', 'loadItemStyles');
				addGlideAjaxParams(ga, data);
				ga.addParam('fields', data.fields);
				ga.addParam('items', data.list.map(function(i) { return i.sys_id; }).join(','));
				ga.getXMLAnswer(function (answer) {
					try {
						var result = JSON.parse(answer);
						if (result.status == 'success') {
							deferred.resolve(result.item_styles);
						} else {
							throw new Error(result.message);
						}
					} catch (e) {
						deferred.reject();

						$log.error(e, answer);
						if ($window.g_user_is_admin) {
							spUtil.addErrorMessage(e.message);
						}
					}
				});

				return deferred.promise;
			} else {
				return $q.resolve([]);
			}
		}
		
		function loadTableStyles(data) {
			if (data.fields) {
				var deferred = $q.defer();

				var ga = new $window.GlideAjax('PortalListUtilClient').setScope('x_376096_pxp');
				ga.addParam('sysparm_name', 'loadTableStyles');
				addGlideAjaxParams(ga, data);
				ga.addParam('fields', data.fields);
				ga.getXMLAnswer(function (answer) {
					try {
						var result = JSON.parse(answer);
						if (result.status == 'success') {
							var styleMap = {};

							result.styles.forEach(function (style) {
								styleMap[style.sys_id] = {
									'style': style.css,
									'class': style.css_class
								};
							});

							deferred.resolve(styleMap);
						} else {
							throw new Error(result.message);
						}
					} catch (e) {
						deferred.reject();

						$log.error(e, answer);
						if ($window.g_user_is_admin) {
							spUtil.addErrorMessage(e.message);
						}
					}
				});

				return deferred.promise;
			} else {
				return $q.resolve({});
			}
		}
		
		function loadTableUIActions(data) {
			var deferred = $q.defer();
			
			var ga = new $window.GlideAjax('PortalListUtilClient').setScope('x_376096_pxp');
			ga.addParam('sysparm_name', 'loadTableUIActions');
			addGlideAjaxParams(ga, data);
			ga.getXMLAnswer(function (answer) {
				try {
					var result = JSON.parse(answer);
					if (result.status == 'success') {
						deferred.resolve(result.ui_actions);
					} else {
						throw new Error(result.message);
					}
				} catch (e) {
					deferred.reject();
					
					$log.error(e, answer);
					if ($window.g_user_is_admin) {
						spUtil.addErrorMessage(e.message);
					}
				}
			});
			
			return deferred.promise;
		}
	
		function loadRowUIActions(data) {
			var deferred = $q.defer();
			if (data.list && data.list.length > 0) {
				var ga = new $window.GlideAjax('PortalListUtilClient').setScope('x_376096_pxp');
				ga.addParam('sysparm_name', 'loadRowUIActions');
				addGlideAjaxParams(ga, data);
				ga.addParam('items', data.list.map(function (i) { return i.sys_id; }).join(','));
				ga.getXMLAnswer(function (answer) {
					try {
						var result = JSON.parse(answer);
						if (result.status == 'success') {
							deferred.resolve(result.ui_actions);
						} else {
							throw new Error(result.message);
						}
					} catch (e) {
						deferred.reject();
						
						$log.error(e, answer);
						if ($window.g_user_is_admin) {
							spUtil.addErrorMessage(e.message);
						}
					}
				});
			} else {
				deferred.resolve({});
			}
			
			return deferred.promise;
		}
		
		function loadItemData(data) {
			if (!data.list) {
				return $q.resolve();
			}
			
			return $q.all([
				loadItemStyles(data),
				loadRowUIActions(data)
			]).then(function (results) {
				var itemStyles = results[0];
				var itemUIActions = results[1];

				data.list.forEach(function (item) {
					item.x_376096_pxp_ui_actions = itemUIActions[item.sys_id];

					var cellStyles = itemStyles[item.sys_id];
					for (var field in cellStyles) {
						var styleSysID = cellStyles[field];
						item[field].x_376096_pxp_styles = tableStyles[styleSysID].style;
						item[field].x_376096_pxp_class = tableStyles[styleSysID].class;
					}
				});
			});
		}
		
		function addGlideAjaxParams(ga, data) {
			ga.addParam('table', data.table);
			ga.addParam('view', data.view || '');
			
			// injected via parent widget
			ga.addParam('type', data.type || '');
			ga.addParam('related_list', data.related_list || '');
			
			ga.addParam('query', data.exportQuery);
			ga.addParam('referring_url', $location.url());
			ga.addParam('url_parameters', JSON.stringify($location.search()));
			
			var g_form = formModelScope ? formModelScope.getGlideForm() : undefined;
			if (g_form) {
				ga.addParam('parent_table', g_form.getTableName());
				ga.addParam('parent_sys_id', g_form.getUniqueValue());
				
				var g_scratchpad = formScope.data.f.g_scratchpad;
				if (g_scratchpad.x_376096_pxp && g_scratchpad.x_376096_pxp.encrypted_record) {
					ga.addParam('parent_encrypted_record', g_scratchpad.x_376096_pxp.encrypted_record);
				}
			}
		}
	}
})();
]]></script>
        <script_name>list_infuse</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-07-01 07:41:43</sys_created_on>
        <sys_id>af653967971011102f77b4b3f153afa1</sys_id>
        <sys_mod_count>31</sys_mod_count>
        <sys_name>x_376096_pxp.list_infuse</sys_name>
        <sys_package display_value="Portal Experience" source="x_376096_pxp">b7a339a3971011102f77b4b3f153afd7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Portal Experience">b7a339a3971011102f77b4b3f153afd7</sys_scope>
        <sys_update_name>sys_ui_script_af653967971011102f77b4b3f153afa1</sys_update_name>
        <sys_updated_by>kr4uzi@gmail.com</sys_updated_by>
        <sys_updated_on>2025-03-31 16:25:08</sys_updated_on>
        <ui_type>1</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_pxp.PXPUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>PXPUtil</name>
        <script><![CDATA[/* global Class, GlideDuration, GlideDateTime, GlideDate, GlideRecord, GlideScriptedExtensionPoint */
/* global gs, sn_kmf_ns */
/* eslint no-undef: "error" */
var PXPUtil = Class.create();
PXPUtil.prototype = {
	initialize: function() {
		this.extensionCache = {
			tables: {},
			scopes: {}
		};
	},
	
	loadUtilityData: function (params) {
		try {
			var pxpData = {};

			// in order to correctly evaluate annotations and conditions on new records,
			// the default values have to be saved
			// those default values might contain sensitive data and should never be exposed
			// therefore they are encrypted on the client until transfered back to the server
			// where it is decrypted (if needed at all)
			if (params.record.isNewRecord()) {
				pxpData.encrypted_record = this.encryptRecord(params.record);
			}
			
			if (gs.getProperty('x_376096_pxp.form.process_flow') == 'true') {
				pxpData.process_flow = this.getProcessFlow(params.record);
			}

			params.scratchpad.x_376096_pxp = pxpData;
		} catch (e) {
			params.scratchpad.x_376096_pxp = {
				utility_error: true
			};
			
			if (gs.hasRole('admin')) {
				params.scratchpad.x_376096_pxp.error_message = e.message;
			}
			
			gs.error('[PXP] error loading utility data: ' + e);
		}
	},
	
	getProcessFlow: function (anyGr) {
		const recordClassName = anyGr.getRecordClassName();
		const extensionPoint = this.getExtensionPointForTable(recordClassName);
		const processFlow = extensionPoint.getProcessFlow(anyGr);
		
		const states = [];
		for (let i = 0, size = processFlow.getSize(); i < size; i++) {
			const choice = processFlow.getChoice(i);
			states.push({
				value: choice.getValue(),
				label: choice.getLabel(),
				state: choice.getParameter('state')
			});
		}
		
		return states;
	},
	
	encryptRecord: function (anyGr) {
		var recordClassName = anyGr.getRecordClassName();
		// make sure that we can also decrypt the record be testing if an extension point for this table exists
		// getExtensionPointForTable will throw if no such extension point exists
		this.getExtensionPointForTable(recordClassName);
		
		var record = {
			'table': anyGr.getRecordClassName(),
			'new_record': anyGr.isNewRecord(),
			'fields': []
		};
		
		for (var attr in anyGr) {
			var ge = anyGr.getElement(attr);
			if (ge != null) {
				var ed = ge.getED();
				record.fields.push({
					'name': attr,
					'type': ed.getInternalType(),
					'value': ge.toString()
				});
			}
		}

		
		var symetricEncrypt = new sn_kmf_ns.KMFCryptoOperation('x_376096_pxp.pxp_record_encryption', 'SYMMETRIC_ENCRYPTION');
		var data = gs.base64Encode(JSON.stringify(record));
		var encryptedData = symetricEncrypt.doOperation(data);
		return gs.base64Encode(encryptedData);
	},
	
	decryptRecord: function (encryptedRecord) {
		var symetricDecrypt = new sn_kmf_ns.KMFCryptoOperation('x_376096_pxp.pxp_record_encryption', 'SYMMETRIC_DECRYPTION');
		var encryptedData = gs.base64Decode(encryptedRecord);
		var data = symetricDecrypt.doOperation(encryptedData);
		var record = JSON.parse(gs.base64Decode(data));
		
		var extensionPoint = this.getExtensionPointForTable(record.table);
		var recordGr = extensionPoint.queryRecords(record.table);
		record.fields.forEach(function (field) {
			extensionPoint.setTemporaryValue(recordGr, field.name, field.value);
		});
		
		if (record.new_record) {
			recordGr.isNewRecord = function () { return true; };
		}
		
		return recordGr;
	},
	
	getExtensionPointForScope: function (scope) {
		if (scope in this.extensionCache.scopes) {
			return this.extensionCache.scopes[scope];
		}
		
		const extensionPoints = new GlideScriptedExtensionPoint().getExtensions('PXPExtension');
		for (let i = 0, length = extensionPoints.length; i < length; i++) {
			const extensionPoint = extensionPoints[i];
			extensionPoint.initialize();

			if (extensionPoint.handlesScope(scope)) {
				this.extensionCache.scopes[scope] = extensionPoint;
				return extensionPoint;
			}
		}

		throw new Error(gs.getMessage('x_376096_pxp_no_extension_point_available_for_scope', [scope]));
	},
		
	getExtensionPointForTable: function (table) {
		if (table in this.extensionCache.tables) {
			return this.extensionCache.tables[table];
		}

		const tableGr = new GlideRecord('sys_db_object');
		tableGr.addQuery('name', table);
		tableGr.setLimit(1);
		tableGr.query();
		if (tableGr.next()) {
			const scope = tableGr.sys_scope.toString();
			const scopedExt = this.extensionCache.scopes[scope];
			if (scopedExt && scopedExt.handlesTable(table)) {
				this.extensionCache.tables[table] = scopedExt;
				return scopedExt;
			}

			const extensionPoints = new GlideScriptedExtensionPoint().getExtensions('PXPExtension');
			for (let i = 0, length = extensionPoints.length; i < length; i++) {
				const extensionPoint = extensionPoints[i];
				extensionPoint.initialize();

				if (extensionPoint.handlesScope(scope) && extensionPoint.handlesTable(table)) {
					this.extensionCache.scopes[scope] = extensionPoint;
					this.extensionCache.tables[table] = extensionPoint;
					return extensionPoint;
				}
			}

			throw new Error(gs.getMessage('x_376096_pxp_no_extension_point_available_for_table', [table]));
		}

		throw new Error(gs.getMessage('x_376096_pxp_invalid_table', [table]));
	},

	type: 'PXPUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-19 09:54:30</sys_created_on>
        <sys_id>c7bb90c197579110d545b18e6253aff2</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>PXPUtil</sys_name>
        <sys_package display_value="Portal Experience" source="x_376096_pxp">b7a339a3971011102f77b4b3f153afd7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Portal Experience">b7a339a3971011102f77b4b3f153afd7</sys_scope>
        <sys_update_name>sys_script_include_c7bb90c197579110d545b18e6253aff2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-28 21:48:27</sys_updated_on>
    </sys_script_include>
</record_update>

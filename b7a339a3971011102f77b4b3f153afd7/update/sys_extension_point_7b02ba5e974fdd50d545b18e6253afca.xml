<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_extension_point">
    <sys_extension_point action="INSERT_OR_UPDATE">
        <api_name>x_376096_pxp.PXPExtension</api_name>
        <description/>
        <example><![CDATA[/* global Class, gs, GlideRecordSecure, GlideRecord, GlideScopedEvaluator, GlideChoiceList, GlideChoice, GlideController, GlideFilter */
/* eslint no-undef: "error" */
var PXPExtension = Class.create();
PXPExtension.prototype = {
	initialize: function() {
		
	},
	
	/**
	 * Wether this Extension Point can query on the given table
	 * without creating additional cross scope privileges
	 *
	 * @param {string} table - the table's name (not label!)
	 * @returns {boolean}
	 */
	handlesTable: function (table) {
		var currentScopeName = gs.getCurrentScopeName();
		if (table.startsWith(currentScopeName + '_')) {
			// Note: While this check might be correct in most cases,
			// this *must* be adjusted if you have opverlapping scopenames!
			// Also this check always fails for global scoped tables
			return true;
		}
		
		// fallback: simply check the table's scope
		var tableGr = new GlideRecord('sys_db_object');
		tableGr.addQuery('sys_scope.scope', currentScopeName == 'rhino.global' ? 'global' : currentScopeName);
		tableGr.addQuery('name', table);
		tableGr.setLimit(1);
		tableGr.query();
		return tableGr.hasNext();
	},
	
	/**
	 * Wether this Extension Point can execute scripts on the given scope
	 * without creating additional cross scope privileges
	 *
	 * @param {string} table - the scope's name (e.g. global or x_mycompany_app)
	 * @returns {boolean}
	 */
	handlesScope: function (scopeName) {
		var currentScopeName = gs.getCurrentScopeName();
		if (scopeName == currentScopeName) {
			return true;
		}
		
		var isGlobalScope = currentScopeName == 'global' || currentScopeName == 'rhino.global';
		if (isGlobalScope) {
			if (scopeName == 'global' || scopeName == 'rhino.global') {
				return true;
			}
		}
		
		return false;
	},

	/**
	 * This method is used to query on a certain table once it has been determined,
	 * that this Extension Point is suitable (by handlesScope).
	 * The records returned by this query will be used only to evaluate conditions of UI Action, Field Styles and Annotations.
	 *
	 * @param {string} table - The table to be queried on
	 * @param {string} encodedQuery - The encoded query to be executed
	 * @param {number} [limit] - if an limit is known for certain (e.g. sys_id=x), this parameter is set
	 * @returns {GlideRecord}
	 */
    queryRecords: function (table, encodedQuery, limit) {
		var recordGr = new GlideRecord(table);
		
		if (encodedQuery) {
			recordGr.addEncodedQuery(encodedQuery);

			if (limit) {
				recordGr.setLimit(limit);
			}

			recordGr.query();
		}
		
		return recordGr;
	},
	
	/**
	 * This method is used to query on a certain table once it has been determined,
	 * that this Extension Point is suitable (by handlesScope).
	 *
	 * @param {string} table - The table to be queried on
	 * @param {string} encodedQuery - The encoded query to be executed
	 * @param {number} [limit] - if an limit is known for certain (e.g. sys_id=x), this parameter is set
	 * @returns {GlideRecord}
	 */
    queryRecordsSecure: function (table, encodedQuery, limit) {
		var recordGr = new GlideRecordSecure(table);
		
		if (encodedQuery) {
			recordGr.addEncodedQuery(encodedQuery);

			if (limit) {
				recordGr.setLimit(limit);
			}

			recordGr.query();
		}
		
		return recordGr;
	},
	
	/**
	 * This method is used to set a temporary value on a record once it has been determined
	 * that this Extension Point is suitable (by handlesTable).
	 * This is required in order to evaluate annotations on new records.
	 *
	 * Note: The Portal Experience App will not perform any database changes on its own!
	 *
	 * @param {GlideRecord} anyGr
	 * @param {string} fieldName
	 * @param {string} fieldValue
	 */
	setTemporaryValue: function (anyGr, fieldName, fieldValue) {
		if (fieldName == 'sys_id') {
			anyGr.setNewGuidValue(fieldValue);
		} else {
			anyGr[fieldName] = fieldValue;
		}
	},
	
	/**
	 * This method is used to generate the process flow for a given record.
	 * The Extension Point will be tested via handlesTable.
	 *
	 * @param {GlideRecord} anyGr
	 * @returns {GlideChoiceList}
	 */
	getProcessFlow: function (anyGr) {
		var tableName = anyGr.getRecordClassName();

		var currentScopeName = gs.getCurrentScopeName();
		var isGlobalScope = currentScopeName == 'global' || currentScopeName == 'rhino.global';
		if (isGlobalScope) {
			// Note: This works only for global scoped tables
			// To reuse a global scoped defined <table>_ProcessFlowList function, it is recommended to 
			// use a script include which is used by your ExtensionPoint as well as the global function
			
			// /nav_to.do?uri=sys_ui_macro.do?sys_id=a34bba13c3332100b0449f2974d3aeba
			var functionName = tableName + "_ProcessFlowList";
			var func = GlideController.getGlobal(functionName);
			if (typeof func == 'function') {
				var current = anyGr;
				return func();
			}
		}
		
		// Fallback: Generate Process Flow based on OOTB configuration
		var processFlowGr = new GlideRecord('sys_process_flow');
		processFlowGr.addQuery('table', tableName);
		processFlowGr.addQuery('active', true);
		processFlowGr.orderBy('order');
		processFlowGr.query();

		var hasCurrent = false;
		var list = new GlideChoiceList();
		while (processFlowGr.next()) {
			var choice = new GlideChoice(processFlowGr.name, processFlowGr.getDisplayValue('label'));
			var match = GlideFilter.checkRecord(anyGr, processFlowGr.condition);
			if (match) {
				choice.setParameter('state', 'current');
				hasCurrent = true;
			} else {
				choice.setParameter('state', hasCurrent ? 'future' : 'past');
			}

			list.add(choice);
		}

		return list;
	},

	type: 'PXPExtension'
};]]></example>
        <name>PXPExtension</name>
        <restrict_scope>false</restrict_scope>
        <sys_class_name>sys_extension_point</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-11 09:09:08</sys_created_on>
        <sys_id>7b02ba5e974fdd50d545b18e6253afca</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>PXPExtension</sys_name>
        <sys_package display_value="Portal Experience" source="x_376096_pxp">b7a339a3971011102f77b4b3f153afd7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Portal Experience">b7a339a3971011102f77b4b3f153afd7</sys_scope>
        <sys_update_name>sys_extension_point_7b02ba5e974fdd50d545b18e6253afca</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-28 19:49:58</sys_updated_on>
    </sys_extension_point>
</record_update>
